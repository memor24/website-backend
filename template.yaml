# template to automate aws parameters for use with sam
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Serverless API with DynamoDB

Resources:
  SimpleServerlessFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./app.py
      Handler: app.lambda_handler
      Runtime: python3.8
      MemorySize: 128
      Timeout: 3
      Role:
        Fn::GetAtt:
          - ViewCounterFunctionRole
          - Arn
      Environment:
        Variables:
          DYNAMODB_TABLE_NAME: !Ref MyTable

  MyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: counter
          AttributeType: N
      KeySchema:
        - AttributeName: id
          KeyType: HASH # partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
          
  ViewCounterFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt MyTable.Arn
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*